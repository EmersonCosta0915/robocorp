import robocorp.log._lifecycle_hooks as @robo_lifecycle_hooks

def foo():
    with @robo_lifecycle_hooks.MethodLifecycleContext(('GENERATOR', __name__, __file__, 'foo', 2, {})) as @ctx:

        def @tmp_0():
            @tmp_1 = call()
            @ctx.before_yield(__name__, __file__, 'foo', 3, @tmp_1)
            @tmp_2 = (yield @tmp_1)
            @ctx.after_yield(__name__, __file__, 'foo', 3)
            return @tmp_2

        def @tmp_3():
            @tmp_4 = 33
            @ctx.before_yield(__name__, __file__, 'foo', 3, @tmp_4)
            @tmp_5 = (yield @tmp_4)
            @ctx.after_yield(__name__, __file__, 'foo', 3)
            return @tmp_5
        for a in [(b := (yield from @tmp_0())), (c := (yield from @tmp_3()))]:
            pass
        @tmp_6 = [b, c]
        @robo_lifecycle_hooks.method_return(__name__, __file__, 'foo', 5, @tmp_6)
        return @tmp_6