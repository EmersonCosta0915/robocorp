import robocorp.log._lifecycle_hooks as @robo_lifecycle_hooks

def foo():
    try:
        @robo_lifecycle_hooks.before_method('METHOD', __name__, __file__, 'foo', 3, {})
        try:
            @robo_lifecycle_hooks.before_iterate('FOR', __name__, __file__, 'for a in [1, 2]', 3)
            for a in [1, 2]:
                @robo_lifecycle_hooks.before_iterate_step('FOR_STEP', __name__, __file__, 'for a in [1, 2]', 4, (('a', a),))
                try:
                    call(a)
                except:
                    import sys as @py_sys
                    @robo_lifecycle_hooks.iterate_step_except('FOR_STEP', __name__, __file__, 'for a in [1, 2]', 3, @py_sys.exc_info())
                    raise
                finally:
                    @robo_lifecycle_hooks.after_iterate_step('FOR_STEP', __name__, __file__, 'for a in [1, 2]', 4)
        except:
            import sys as @py_sys
            @robo_lifecycle_hooks.iterate_except('FOR', __name__, __file__, 'for a in [1, 2]', 3, @py_sys.exc_info())
            raise
        finally:
            @robo_lifecycle_hooks.after_iterate('FOR', __name__, __file__, 'for a in [1, 2]', 3)
    except:
        import sys as @py_sys
        @robo_lifecycle_hooks.method_except('METHOD', __name__, __file__, 'foo', 3, @py_sys.exc_info())
        raise
    finally:
        @robo_lifecycle_hooks.after_method('METHOD', __name__, __file__, 'foo', 3)