import robocorp.log._lifecycle_hooks as @robo_lifecycle_hooks

def method():
    with @robo_lifecycle_hooks.MethodLifecycleContext(('GENERATOR', __name__, __file__, 'method', 2, {})) as @ctx:

        def @tmp_0():
            @tmp_1 = 3
            @ctx.before_yield(__name__, __file__, 'method', 3, @tmp_1)
            @tmp_2 = (yield @tmp_1)
            @ctx.after_yield(__name__, __file__, 'method', 3)
            return @tmp_2
        a = call() and (yield from @tmp_0())
        @robo_lifecycle_hooks.after_assign(__name__, __file__, 'method', 3, 'a', a)
        @tmp_3 = 2
        @ctx.before_yield(__name__, __file__, 'method', 4, @tmp_3)
        yield @tmp_3
        @ctx.after_yield(__name__, __file__, 'method', 4)
        @tmp_4 = call()
        @ctx.before_yield(__name__, __file__, 'method', 5, @tmp_4)
        x = (yield @tmp_4)
        @ctx.after_yield(__name__, __file__, 'method', 5)
        @robo_lifecycle_hooks.after_assign(__name__, __file__, 'method', 5, 'x', x)